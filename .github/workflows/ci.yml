name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  lint:
    name: Lint
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.25'

    - name: Cache Go modules
      uses: actions/cache@v4
      with:
        path: |
          ~/.cache/go-build
          ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-

    - name: Download dependencies
      run: |
        cd app
        go mod download
        cd ../tests/integration
        go mod download

    - name: Run golangci-lint (App)
      uses: golangci/golangci-lint-action@v6
      with:
        version: latest
        working-directory: app
        args: --timeout=5m

    - name: Run golangci-lint (Integration Tests)
      uses: golangci/golangci-lint-action@v6
      with:
        version: latest
        working-directory: tests/integration
        args: --timeout=2m

  test:
    name: Test
    runs-on: ubuntu-latest
    needs: lint
    steps:
    - uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.25'

    - name: Cache Go modules
      uses: actions/cache@v4
      with:
        path: |
          ~/.cache/go-build
          ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-

    - name: Download dependencies
      run: |
        cd app
        go mod download
        cd ../tests/integration
        go mod download

    - name: Build application
      run: |
        cd app
        go build -v ./cmd/server

    - name: Build integration test runner
      run: |
        cd tests/integration
        go build -v .

    - name: Run Go unit tests
      run: |
        cd app
        go test -v -race -coverprofile=coverage.out ./...

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v4
      with:
        file: ./app/coverage.out
        flags: unittests
        name: codecov-umbrella

  e2e-test:
    name: E2E Test
    runs-on: ubuntu-latest
    needs: [lint, test]
    steps:
    - uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build Docker image
      run: docker compose build --no-cache

    - name: Start application
      run: |
        docker compose up -d
        sleep 10

    - name: Wait for application to be ready
      run: |
        timeout=60
        while [ $timeout -gt 0 ]; do
          if curl -f http://localhost:8080/ > /dev/null 2>&1; then
            echo "Application is ready"
            break
          fi
          echo "Waiting for application... ($timeout seconds left)"
          sleep 2
          timeout=$((timeout-2))
        done
        if [ $timeout -le 0 ]; then
          echo "Application failed to start"
          docker compose logs
          exit 1
        fi

    - name: Run E2E API tests
      run: |
        chmod +x tests/e2e/e2e_api_test.sh
        ./tests/e2e/e2e_api_test.sh

    - name: Run Integration tests
      run: |
        chmod +x tests/integration/test_all_lessons.sh
        ./tests/integration/test_all_lessons.sh

    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-results
        path: tests/results/

    - name: Stop application
      if: always()
      run: docker compose down